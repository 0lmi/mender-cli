include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-unittests.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

image: golang:1.14

variables:
  REPO_NAME: github.com/mendersoftware/mender-cli
  GITHUB_RELEASE_BINARY: mender-cli
  S3_BUCKET_NAME: "mender"
  S3_BUCKET_PATH: "mender-cli"
  BUILD_DIR: build

stages:
  - test
  - test_acceptance_build
  - test_acceptance
  - build
  - publish

test_acceptance_build:tools:
  image: golang:1.14
  stage: test_acceptance_build
  script:
    - apt-get update && apt-get install make
    # make target env var
    - export PROJECT_DIR="$CI_PROJECT_DIR/"
    - make build-acceptance-tools
  artifacts:
    untracked: true
    paths:
      - mender-cli
      - mender-artifact

test_acceptance_build:image:
  stage: test_acceptance_build
  image: docker
  services:
    - docker:19.03.5-dind
  script:
    - apk add make
    - export PROJECT_DIR="$CI_PROJECT_DIR/"
    - make build-acceptance-image
    - docker save testing > $CI_PROJECT_DIR/acceptance_testing_image.tar
  artifacts:
    expire_in: 2w
    paths:
      - acceptance_testing_image.tar

test:static:
  image: golang:1.14
  stage: test
  script:
    - make get-go-tools
    - make test-static


.sync_branches_template: &sync_remote_branches
    before_script:
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

test_acceptance:run:
  stage: test_acceptance
  image: tiangolo/docker-with-compose
  dependencies:
    - test_acceptance_build:tools
    - test_acceptance_build:image
  services:
    - docker:19.03.5-dind
  script:
    - apk add git bash make
    - docker load -i acceptance_testing_image.tar
    # make target env var
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - make run-acceptance
  tags:
    - docker

compile:
  image: golang:1.14
  stage: build
  before_script:
    - mkdir -p /go/src/$(dirname $REPO_NAME)/mender-cli /go/src/_/builds
    - cp -r $CI_PROJECT_DIR /go/src/$(dirname $REPO_NAME)
    - cd /go/src/$(dirname $REPO_NAME)/mender-cli
    - make get-build-deps
  script:
    - make build-multiplatform
    - cp /go/src/$(dirname $REPO_NAME)/mender-cli/mender-cli.linux.amd64 $CI_PROJECT_DIR/
    - cp /go/src/$(dirname $REPO_NAME)/mender-cli/mender-cli.darwin.amd64 $CI_PROJECT_DIR/
  artifacts:
    paths:
      - mender-cli.linux.amd64
      - mender-cli.darwin.amd64

publish:s3:
  stage: publish
  image: debian:buster
  dependencies:
    - compile
  before_script:
    - apt update && apt install -yyq awscli
  script:
    - echo "Publishing ${CI_COMMIT_REF_NAME} version for linux to S3"
    - aws s3 cp $GITHUB_RELEASE_BINARY.linux.amd64
        s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/linux/mender-cli
    - aws s3api put-object-acl --acl public-read --bucket $S3_BUCKET_NAME
        --key $S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/linux/mender-cli
    - echo "Publishing ${CI_COMMIT_REF_NAME} version for darwin to S3"
    - aws s3 cp $GITHUB_RELEASE_BINARY.darwin.amd64
        s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/darwin/mender-cli
    - aws s3api put-object-acl --acl public-read --bucket $S3_BUCKET_NAME
        --key $S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/darwin/mender-cli
  only:
    - /^(master|[0-9]+\.[0-9]+\.x)$/
