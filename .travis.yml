language: go

# Forces travis to use VM insted container, required to be able to build containers.
sudo: required

services:
    - docker

# Golang version matrix
go:
    - "1.10"

env:
    global:
        # Binary name to be uploaded to github releases
        - GITHUB_RELEASE_BINARY=mender-cli
        - GITHUB_RELEASE_DEPLOY_REPO=mendersoftware/mender-cli
        # - GITHUB_RELEASE_TOKEN=''

        - AWS_BUCKET=mender-cli
        - AWS_REGION=eu-west-1
        - AWS_S3_ACL=public_read
        # - AWS_S3_ACCESS_KEY_ID=''
        # - AWS_S3_SECRET_ACCESS_KEY=''

        - BUILD_DIR=build

jobs:
    include:
    - stage: Static code checks
      install:
        - sudo apt-get -qq update
        # Install code coverage tooling
        - go get -u github.com/axw/gocov/gocov
        - go get -u golang.org/x/tools/cmd/cover

        # Install cyclomatic dependency analysis tool
        - go get -u github.com/fzipp/gocyclo

        - sudo apt-get -qq install -y e2tools
        - npm install -g swagger-cli

        # Get our own Swagger verifier
        - wget https://raw.githubusercontent.com/mendersoftware/autodocs/master/verify_docs.py

        - make get-tools

      script:
        - git branch -m temp-branch || true
        # Git trick: Fetch directly into our local branches instead of remote
        # branches.
        - git fetch origin 'refs/heads/*:refs/heads/*'
        # Get last remaining tags, if any.
        - git fetch --tags origin

        - make check

    - stage: Tests
      name: "unit"
      script:
        - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $?;
      after_success:
        - bash <(curl -s https://codecov.io/bash) -F unittests ;

    - stage: Tests
      name: "acceptance"
      script:
        - ./tests/build-acceptance $PWD/tests
        - TESTS_DIR=$PWD/tests ./tests/integration/extra/travis-testing/run-test-environment "acceptance" ./tests/integration ./tests/docker-compose.acceptance.yml ;

    - stage: Tests
      name: "backend-integration"
      script:
        - echo "TODO fill this in when the CLI actually becomes a part of integration testing"

    - stage: Build and publish
      if: type = push
      env: ARCH=amd64 OS=linux
      script:
        - mkdir "$BUILD_DIR"
        - make install
        - CGO_ENABLED=0 GOOS=$OS GOARCH=$ARCH go build -o "$BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH" -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`";
      deploy:
        -
            provider: releases
            api_key: $GITHUB_RELEASE_TOKEN
            file: $BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH
            skip_cleanup: true
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: true
                all_branches: true
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/release/$TRAVIS_TAG
            local_dir: build
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: true
                all_branches: true

        # Push master to s3 upon regular merge
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/master/$TRAVIS_BUILD_NUMBER
            local_dir: $BUILD_DIR
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: false
                all_branches: true

        # Additionally, push as 'latest' s3 upon regular merge
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/latest/$TRAVIS_BRANCH
            local_dir: $BUILD_DIR
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO

    - stage: Build and publish
      if: type = push
      env: ARCH=amd64 OS=darwin
      script:
        - mkdir "$BUILD_DIR"
        - make install
        - CGO_ENABLED=0 GOOS=$OS GOARCH=$ARCH go build -o "$BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH" -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`";
      deploy:
        -
            provider: releases
            api_key: $GITHUB_RELEASE_TOKEN
            file: $BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH
            skip_cleanup: true
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: true
                all_branches: true
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/release/$TRAVIS_TAG
            local_dir: build
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: true
                all_branches: true

        # Push master to s3 upon regular merge
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/master/$TRAVIS_BUILD_NUMBER
            local_dir: $BUILD_DIR
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO
                tags: false
                all_branches: true

        # Additionally, push as 'latest' s3 upon regular merge
        -
            provider: s3
            access_key_id: $AWS_S3_ACCESS_KEY_ID
            secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
            bucket: $AWS_BUCKET
            region: $AWS_REGION
            upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/latest/$TRAVIS_BRANCH
            local_dir: $BUILD_DIR
            skip_cleanup: true
            acl: $AWS_S3_ACL
            on:
                repo: $GITHUB_RELEASE_DEPLOY_REPO

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG
