language: go

# Forces travis to use VM insted container, required to be able to build containers.
sudo: required

services:
    - docker
    - mongodb

# Golang version matrix
go:
    - 1.8

env:
    global:
        # Binary name to be uploaded to github releases
        - GITHUB_RELEASE_BINARY=mender-cli
        - GITHUB_RELEASE_DEPLOY_REPO=mendersoftware/mender-cli
        # - GITHUB_RELEASE_TOKEN=''

        - AWS_BUCKET=mender-cli
        - AWS_REGION=eu-west-1
        - AWS_S3_ACL=public_read
        # - AWS_S3_ACCESS_KEY_ID=''
        # - AWS_S3_SECRET_ACCESS_KEY=''

        - BUILD_DIR=build

    # Run test task(s) and platform/arch builds separately
    matrix:
        - JOB_TYPE=compile_and_basic_tests
        - JOB_TYPE=acceptance_tests
        - JOB_TYPE=deploy ARCH=amd64 OS=linux
        - JOB_TYPE=deploy ARCH=amd64 OS=darwin

before_install:
    - make get-tools

before_script:
    # Print build info that binary is compiled with.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Git trick: Fetch directly into our local branches instead of remote
    # branches.
    - git fetch origin 'refs/heads/*:refs/heads/*'
    # Get last remaining tags, if any.
    - git fetch --tags origin

    - make check

script:
    # needed unconditionally - s3 deploy provider will look for it even if disabled
    - mkdir "$BUILD_DIR"
    - if [ "$JOB_TYPE" = compile_and_basic_tests ] && [ -z $TRAVIS_TAG ]; then
        go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $?;
      fi

    - if [ "$JOB_TYPE" = acceptance_tests ]; then
        ./tests/build-acceptance $PWD/tests

        TESTS_DIR=$PWD/tests ./tests/integration/extra/travis-testing/run-test-environment "acceptance" ./tests/integration ./tests/docker-compose.acceptance.yml ;

      fi

    - make install

    # Only build platform/os releases on deploy, and if we're tagging
    - if [ "$JOB_TYPE" = deploy ]; then
        CGO_ENABLED=0 GOOS=$OS GOARCH=$ARCH go build -o "$BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH" -ldflags "-X main.Commit=`echo $TRAVIS_COMMIT` -X main.Tag=`echo $TRAVIS_TAG` -X main.Branch=`echo $TRAVIS_BRANCH` -X main.BuildNumber=`echo $TRAVIS_BUILD_NUMBER`";
      fi

deploy:
    # Push to github releases upon tagging.
    -
        provider: releases
        api_key: $GITHUB_RELEASE_TOKEN
        file: $BUILD_DIR/$GITHUB_RELEASE_BINARY.$OS.$ARCH
        skip_cleanup: true
        on:
            repo: $GITHUB_RELEASE_DEPLOY_REPO
            tags: true
            all_branches: true
            condition: $JOB_TYPE=deploy

    # Push a tagged release to s3
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/release/$TRAVIS_TAG
        local_dir: build
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $GITHUB_RELEASE_DEPLOY_REPO
            tags: true
            all_branches: true
            condition: $JOB_TYPE=deploy

    # Push master to s3 upon regular merge
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/master/$TRAVIS_BUILD_NUMBER
        local_dir: $BUILD_DIR
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $GITHUB_RELEASE_DEPLOY_REPO
            tags: false
            all_branches: true
            condition: $JOB_TYPE=deploy

    # Additionally, push as 'latest' s3 upon regular merge
    -
        provider: s3
        access_key_id: $AWS_S3_ACCESS_KEY_ID
        secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
        bucket: $AWS_BUCKET
        region: $AWS_REGION
        upload-dir: $GITHUB_RELEASE_DEPLOY_REPO/latest/$TRAVIS_BRANCH
        local_dir: $BUILD_DIR
        skip_cleanup: true
        acl: $AWS_S3_ACL
        on:
            repo: $GITHUB_RELEASE_DEPLOY_REPO
            condition: $JOB_TYPE=deploy
